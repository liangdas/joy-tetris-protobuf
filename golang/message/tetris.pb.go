// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: message/tetris.proto

package message

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TetrisGameType int32

const (
	TetrisGameType_CLASSIC TetrisGameType = 0 //经典模式
	TetrisGameType_QUICK   TetrisGameType = 1 //快速模式
)

// Enum value maps for TetrisGameType.
var (
	TetrisGameType_name = map[int32]string{
		0: "CLASSIC",
		1: "QUICK",
	}
	TetrisGameType_value = map[string]int32{
		"CLASSIC": 0,
		"QUICK":   1,
	}
)

func (x TetrisGameType) Enum() *TetrisGameType {
	p := new(TetrisGameType)
	*p = x
	return p
}

func (x TetrisGameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TetrisGameType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_tetris_proto_enumTypes[0].Descriptor()
}

func (TetrisGameType) Type() protoreflect.EnumType {
	return &file_message_tetris_proto_enumTypes[0]
}

func (x TetrisGameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TetrisGameType.Descriptor instead.
func (TetrisGameType) EnumDescriptor() ([]byte, []int) {
	return file_message_tetris_proto_rawDescGZIP(), []int{0}
}

//创建Tetris游戏房间
type S2S_Tetris_Create struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameType  TetrisGameType `protobuf:"varint,1,opt,name=game_type,json=gameType,proto3,enum=tetris.TetrisGameType" json:"game_type,omitempty"` //游戏模式
	PlayerNum int64          `protobuf:"varint,2,opt,name=player_num,json=playerNum,proto3" json:"player_num,omitempty"`                         //对战人数 1/2
	Gear      int64          `protobuf:"varint,3,opt,name=gear,proto3" json:"gear,omitempty"`                                                    //档位（投入金币数）0,1,2,3
	UseProps  bool           `protobuf:"varint,4,opt,name=use_props,json=useProps,proto3" json:"use_props,omitempty"`                            //是否使用道具
	Private   bool           `protobuf:"varint,5,opt,name=private,proto3" json:"private,omitempty"`                                              //是否私有房
	UserList  []int64        `protobuf:"varint,6,rep,packed,name=user_list,json=userList,proto3" json:"user_list,omitempty"`                     //玩家的userId
	Version   string         `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`                                               //协议版本号
	Owner     int64          `protobuf:"varint,8,opt,name=owner,proto3" json:"owner,omitempty"`                                                  //房间拥有者
	RoomId    string         `protobuf:"bytes,9,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (x *S2S_Tetris_Create) Reset() {
	*x = S2S_Tetris_Create{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tetris_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2S_Tetris_Create) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2S_Tetris_Create) ProtoMessage() {}

func (x *S2S_Tetris_Create) ProtoReflect() protoreflect.Message {
	mi := &file_message_tetris_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2S_Tetris_Create.ProtoReflect.Descriptor instead.
func (*S2S_Tetris_Create) Descriptor() ([]byte, []int) {
	return file_message_tetris_proto_rawDescGZIP(), []int{0}
}

func (x *S2S_Tetris_Create) GetGameType() TetrisGameType {
	if x != nil {
		return x.GameType
	}
	return TetrisGameType_CLASSIC
}

func (x *S2S_Tetris_Create) GetPlayerNum() int64 {
	if x != nil {
		return x.PlayerNum
	}
	return 0
}

func (x *S2S_Tetris_Create) GetGear() int64 {
	if x != nil {
		return x.Gear
	}
	return 0
}

func (x *S2S_Tetris_Create) GetUseProps() bool {
	if x != nil {
		return x.UseProps
	}
	return false
}

func (x *S2S_Tetris_Create) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *S2S_Tetris_Create) GetUserList() []int64 {
	if x != nil {
		return x.UserList
	}
	return nil
}

func (x *S2S_Tetris_Create) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *S2S_Tetris_Create) GetOwner() int64 {
	if x != nil {
		return x.Owner
	}
	return 0
}

func (x *S2S_Tetris_Create) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

//创建Tetris游戏房间
type S2S_Tetris_Create_Debug struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameType  TetrisGameType `protobuf:"varint,1,opt,name=game_type,json=gameType,proto3,enum=tetris.TetrisGameType" json:"game_type,omitempty"` //游戏模式
	PlayerNum int64          `protobuf:"varint,2,opt,name=player_num,json=playerNum,proto3" json:"player_num,omitempty"`                         //对战人数 1/2
	Gear      int64          `protobuf:"varint,3,opt,name=gear,proto3" json:"gear,omitempty"`                                                    //档位（投入金币数）0,1,2,3
	UseProps  bool           `protobuf:"varint,4,opt,name=use_props,json=useProps,proto3" json:"use_props,omitempty"`                            //是否使用道具
	Private   bool           `protobuf:"varint,5,opt,name=private,proto3" json:"private,omitempty"`                                              //是否私有房
	UserList  []int64        `protobuf:"varint,6,rep,packed,name=user_list,json=userList,proto3" json:"user_list,omitempty"`                     //玩家的userId
	Version   string         `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`                                               //协议版本号
	Owner     int64          `protobuf:"varint,8,opt,name=owner,proto3" json:"owner,omitempty"`                                                  //房间拥有者
	RoomId    string         `protobuf:"bytes,9,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (x *S2S_Tetris_Create_Debug) Reset() {
	*x = S2S_Tetris_Create_Debug{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tetris_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2S_Tetris_Create_Debug) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2S_Tetris_Create_Debug) ProtoMessage() {}

func (x *S2S_Tetris_Create_Debug) ProtoReflect() protoreflect.Message {
	mi := &file_message_tetris_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2S_Tetris_Create_Debug.ProtoReflect.Descriptor instead.
func (*S2S_Tetris_Create_Debug) Descriptor() ([]byte, []int) {
	return file_message_tetris_proto_rawDescGZIP(), []int{1}
}

func (x *S2S_Tetris_Create_Debug) GetGameType() TetrisGameType {
	if x != nil {
		return x.GameType
	}
	return TetrisGameType_CLASSIC
}

func (x *S2S_Tetris_Create_Debug) GetPlayerNum() int64 {
	if x != nil {
		return x.PlayerNum
	}
	return 0
}

func (x *S2S_Tetris_Create_Debug) GetGear() int64 {
	if x != nil {
		return x.Gear
	}
	return 0
}

func (x *S2S_Tetris_Create_Debug) GetUseProps() bool {
	if x != nil {
		return x.UseProps
	}
	return false
}

func (x *S2S_Tetris_Create_Debug) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *S2S_Tetris_Create_Debug) GetUserList() []int64 {
	if x != nil {
		return x.UserList
	}
	return nil
}

func (x *S2S_Tetris_Create_Debug) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *S2S_Tetris_Create_Debug) GetOwner() int64 {
	if x != nil {
		return x.Owner
	}
	return 0
}

func (x *S2S_Tetris_Create_Debug) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

//创建Tetris游戏房间 返回结构
type S2R_Tetris_Create struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameType  TetrisGameType `protobuf:"varint,1,opt,name=game_type,json=gameType,proto3,enum=tetris.TetrisGameType" json:"game_type,omitempty"` //游戏模式
	PlayerNum int64          `protobuf:"varint,2,opt,name=player_num,json=playerNum,proto3" json:"player_num,omitempty"`                         //对战人数 1/2
	Gear      int64          `protobuf:"varint,3,opt,name=gear,proto3" json:"gear,omitempty"`                                                    //档位（投入金币数）
	UseProps  bool           `protobuf:"varint,4,opt,name=use_props,json=useProps,proto3" json:"use_props,omitempty"`                            //是否使用道具
	Private   bool           `protobuf:"varint,5,opt,name=private,proto3" json:"private,omitempty"`                                              //是否私有房
	UserList  []int64        `protobuf:"varint,6,rep,packed,name=user_list,json=userList,proto3" json:"user_list,omitempty"`                     //玩家的userId
	Version   string         `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`                                               //协议版本号
	Owner     int64          `protobuf:"varint,8,opt,name=owner,proto3" json:"owner,omitempty"`                                                  //房间拥有者
	RoomId    string         `protobuf:"bytes,9,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                                   //房间ID  session.SetPush("ludo",room_id)
	ShortId   string         `protobuf:"bytes,10,opt,name=short_id,json=shortId,proto3" json:"short_id,omitempty"`                               //房间短ID 私有房间才存在短ID，匹配房间短ID跟room_id一样
}

func (x *S2R_Tetris_Create) Reset() {
	*x = S2R_Tetris_Create{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tetris_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2R_Tetris_Create) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2R_Tetris_Create) ProtoMessage() {}

func (x *S2R_Tetris_Create) ProtoReflect() protoreflect.Message {
	mi := &file_message_tetris_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2R_Tetris_Create.ProtoReflect.Descriptor instead.
func (*S2R_Tetris_Create) Descriptor() ([]byte, []int) {
	return file_message_tetris_proto_rawDescGZIP(), []int{2}
}

func (x *S2R_Tetris_Create) GetGameType() TetrisGameType {
	if x != nil {
		return x.GameType
	}
	return TetrisGameType_CLASSIC
}

func (x *S2R_Tetris_Create) GetPlayerNum() int64 {
	if x != nil {
		return x.PlayerNum
	}
	return 0
}

func (x *S2R_Tetris_Create) GetGear() int64 {
	if x != nil {
		return x.Gear
	}
	return 0
}

func (x *S2R_Tetris_Create) GetUseProps() bool {
	if x != nil {
		return x.UseProps
	}
	return false
}

func (x *S2R_Tetris_Create) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *S2R_Tetris_Create) GetUserList() []int64 {
	if x != nil {
		return x.UserList
	}
	return nil
}

func (x *S2R_Tetris_Create) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *S2R_Tetris_Create) GetOwner() int64 {
	if x != nil {
		return x.Owner
	}
	return 0
}

func (x *S2R_Tetris_Create) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *S2R_Tetris_Create) GetShortId() string {
	if x != nil {
		return x.ShortId
	}
	return ""
}

//客户端请求
type C2S_Tetris struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//消息类型，可取字符串为下面从序号3-11，表示具体为哪一条消息；客户端每次只会发送一条请求
	MsgType string `protobuf:"bytes,1,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"`
	//房间id，通用字段，每条消息都会包含该参数
	RoomId                     string                 `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	EnterRoomC2S               *C2S_EnterRoom         `protobuf:"bytes,3,opt,name=enter_room_c2s,json=enterRoomC2s,proto3" json:"enter_room_c2s,omitempty"`                                             //进入房间请求
	ExitRoomC2S                *C2S_ExitRoom          `protobuf:"bytes,4,opt,name=exit_room_c2s,json=exitRoomC2s,proto3" json:"exit_room_c2s,omitempty"`                                                //退出房间请求
	SyncInfoC2S                *C2S_SyncInfo          `protobuf:"bytes,5,opt,name=sync_info_c2s,json=syncInfoC2s,proto3" json:"sync_info_c2s,omitempty"`                                                //断线后重新申请全量数据请求
	HeartbeatC2S               *C2S_Heartbeat         `protobuf:"bytes,6,opt,name=heartbeat_c2s,json=heartbeatC2s,proto3" json:"heartbeat_c2s,omitempty"`                                               //心跳消息
	PlayerExpressionC2S        *C2S_PlayerExpression  `protobuf:"bytes,7,opt,name=player_expression_c2s,json=playerExpressionC2s,proto3" json:"player_expression_c2s,omitempty"`                        //发送表情请求
	PlayerOperationSkeletonC2S *C2S_OperationSkeleton `protobuf:"bytes,8,opt,name=player_operation_skeleton_c2s,json=playerOperationSkeletonC2s,proto3" json:"player_operation_skeleton_c2s,omitempty"` //操作方块
	PlayerSelectSkeletonC2S    *C2S_SelectSkeleton    `protobuf:"bytes,9,opt,name=player_select_skeleton_c2s,json=playerSelectSkeletonC2s,proto3" json:"player_select_skeleton_c2s,omitempty"`          //更改还未开始的方块形状
}

func (x *C2S_Tetris) Reset() {
	*x = C2S_Tetris{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tetris_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_Tetris) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_Tetris) ProtoMessage() {}

func (x *C2S_Tetris) ProtoReflect() protoreflect.Message {
	mi := &file_message_tetris_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_Tetris.ProtoReflect.Descriptor instead.
func (*C2S_Tetris) Descriptor() ([]byte, []int) {
	return file_message_tetris_proto_rawDescGZIP(), []int{3}
}

func (x *C2S_Tetris) GetMsgType() string {
	if x != nil {
		return x.MsgType
	}
	return ""
}

func (x *C2S_Tetris) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *C2S_Tetris) GetEnterRoomC2S() *C2S_EnterRoom {
	if x != nil {
		return x.EnterRoomC2S
	}
	return nil
}

func (x *C2S_Tetris) GetExitRoomC2S() *C2S_ExitRoom {
	if x != nil {
		return x.ExitRoomC2S
	}
	return nil
}

func (x *C2S_Tetris) GetSyncInfoC2S() *C2S_SyncInfo {
	if x != nil {
		return x.SyncInfoC2S
	}
	return nil
}

func (x *C2S_Tetris) GetHeartbeatC2S() *C2S_Heartbeat {
	if x != nil {
		return x.HeartbeatC2S
	}
	return nil
}

func (x *C2S_Tetris) GetPlayerExpressionC2S() *C2S_PlayerExpression {
	if x != nil {
		return x.PlayerExpressionC2S
	}
	return nil
}

func (x *C2S_Tetris) GetPlayerOperationSkeletonC2S() *C2S_OperationSkeleton {
	if x != nil {
		return x.PlayerOperationSkeletonC2S
	}
	return nil
}

func (x *C2S_Tetris) GetPlayerSelectSkeletonC2S() *C2S_SelectSkeleton {
	if x != nil {
		return x.PlayerSelectSkeletonC2S
	}
	return nil
}

//发送表情请求
type C2S_PlayerExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpressIndex string `protobuf:"bytes,1,opt,name=express_index,json=expressIndex,proto3" json:"express_index,omitempty"` //表情序号
	ToUser       int64  `protobuf:"varint,2,opt,name=to_user,json=toUser,proto3" json:"to_user,omitempty"`                  //发送给用户ID，表情会飞到对方的头像上显示
}

func (x *C2S_PlayerExpression) Reset() {
	*x = C2S_PlayerExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tetris_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_PlayerExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_PlayerExpression) ProtoMessage() {}

func (x *C2S_PlayerExpression) ProtoReflect() protoreflect.Message {
	mi := &file_message_tetris_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_PlayerExpression.ProtoReflect.Descriptor instead.
func (*C2S_PlayerExpression) Descriptor() ([]byte, []int) {
	return file_message_tetris_proto_rawDescGZIP(), []int{4}
}

func (x *C2S_PlayerExpression) GetExpressIndex() string {
	if x != nil {
		return x.ExpressIndex
	}
	return ""
}

func (x *C2S_PlayerExpression) GetToUser() int64 {
	if x != nil {
		return x.ToUser
	}
	return 0
}

//发送心跳消息
type C2S_Heartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hold uint32 `protobuf:"varint,1,opt,name=hold,proto3" json:"hold,omitempty"` //占位字段，无意义
}

func (x *C2S_Heartbeat) Reset() {
	*x = C2S_Heartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tetris_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_Heartbeat) ProtoMessage() {}

func (x *C2S_Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_message_tetris_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_Heartbeat.ProtoReflect.Descriptor instead.
func (*C2S_Heartbeat) Descriptor() ([]byte, []int) {
	return file_message_tetris_proto_rawDescGZIP(), []int{5}
}

func (x *C2S_Heartbeat) GetHold() uint32 {
	if x != nil {
		return x.Hold
	}
	return 0
}

//操作方块
type C2S_OperationSkeleton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opcode string `protobuf:"bytes,1,opt,name=opcode,proto3" json:"opcode,omitempty"` //操作指令 RR 顺时针旋转90度 MR 右移 ML 左移 MB 向下加速 MT 减速
	Frame  uint32 `protobuf:"varint,2,opt,name=Frame,proto3" json:"Frame,omitempty"`  //帧数，防止因为网络延迟的误操作
}

func (x *C2S_OperationSkeleton) Reset() {
	*x = C2S_OperationSkeleton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tetris_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_OperationSkeleton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_OperationSkeleton) ProtoMessage() {}

func (x *C2S_OperationSkeleton) ProtoReflect() protoreflect.Message {
	mi := &file_message_tetris_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_OperationSkeleton.ProtoReflect.Descriptor instead.
func (*C2S_OperationSkeleton) Descriptor() ([]byte, []int) {
	return file_message_tetris_proto_rawDescGZIP(), []int{6}
}

func (x *C2S_OperationSkeleton) GetOpcode() string {
	if x != nil {
		return x.Opcode
	}
	return ""
}

func (x *C2S_OperationSkeleton) GetFrame() uint32 {
	if x != nil {
		return x.Frame
	}
	return 0
}

//更改还未开始的方块形状
type C2S_SelectSkeleton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frame        uint32 `protobuf:"varint,1,opt,name=Frame,proto3" json:"Frame,omitempty"`                                  //帧数，防止因为网络延迟的误操作
	SkeletonType string `protobuf:"bytes,2,opt,name=skeleton_type,json=skeletonType,proto3" json:"skeleton_type,omitempty"` // I、O、T、J、S、L、Z
}

func (x *C2S_SelectSkeleton) Reset() {
	*x = C2S_SelectSkeleton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tetris_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_SelectSkeleton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_SelectSkeleton) ProtoMessage() {}

func (x *C2S_SelectSkeleton) ProtoReflect() protoreflect.Message {
	mi := &file_message_tetris_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_SelectSkeleton.ProtoReflect.Descriptor instead.
func (*C2S_SelectSkeleton) Descriptor() ([]byte, []int) {
	return file_message_tetris_proto_rawDescGZIP(), []int{7}
}

func (x *C2S_SelectSkeleton) GetFrame() uint32 {
	if x != nil {
		return x.Frame
	}
	return 0
}

func (x *C2S_SelectSkeleton) GetSkeletonType() string {
	if x != nil {
		return x.SkeletonType
	}
	return ""
}

//服务端应答
type S2C_Tetris struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId  string `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"` //房间id，通用字段，每条消息都会包含该参数
	MsgType uint32 `protobuf:"varint,2,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"`
	MsgId   uint32 `protobuf:"varint,3,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"` //消息标号
	// 玩家进入房间广播
	PlayerEnterRoomS2CBroadcast *S2C_PlayerEnterRoomBroadcast `protobuf:"bytes,4,opt,name=player_enter_room_s2c_broadcast,json=playerEnterRoomS2cBroadcast,proto3" json:"player_enter_room_s2c_broadcast,omitempty"`
	// 玩家退出游戏广播
	PlayerExitS2CBroadcast *S2C_PlayerExitBroadcast `protobuf:"bytes,5,opt,name=player_exit_s2c_broadcast,json=playerExitS2cBroadcast,proto3" json:"player_exit_s2c_broadcast,omitempty"`
	// 房间游戏开始广播
	GameStartS2CBroadcast *S2C_GameStartBroadcast `protobuf:"bytes,6,opt,name=game_start_s2c_broadcast,json=gameStartS2cBroadcast,proto3" json:"game_start_s2c_broadcast,omitempty"`
	// 玩家发送表情广播
	PlayerExpressionS2CBroadcast *S2C_PlayerExpressionBroadcast `protobuf:"bytes,7,opt,name=player_expression_s2c_broadcast,json=playerExpressionS2cBroadcast,proto3" json:"player_expression_s2c_broadcast,omitempty"`
	// 游戏数据变更广播
	GridS2CBroadcast *S2C_GridBroadcast `protobuf:"bytes,8,opt,name=grid_s2c_broadcast,json=gridS2cBroadcast,proto3" json:"grid_s2c_broadcast,omitempty"`
	// 游戏结束
	GameOverS2CBroadcast *S2C_GameOverBroadcast `protobuf:"bytes,9,opt,name=game_over_s2c_broadcast,json=gameOverS2cBroadcast,proto3" json:"game_over_s2c_broadcast,omitempty"`
}

func (x *S2C_Tetris) Reset() {
	*x = S2C_Tetris{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tetris_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_Tetris) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_Tetris) ProtoMessage() {}

func (x *S2C_Tetris) ProtoReflect() protoreflect.Message {
	mi := &file_message_tetris_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_Tetris.ProtoReflect.Descriptor instead.
func (*S2C_Tetris) Descriptor() ([]byte, []int) {
	return file_message_tetris_proto_rawDescGZIP(), []int{8}
}

func (x *S2C_Tetris) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *S2C_Tetris) GetMsgType() uint32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *S2C_Tetris) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *S2C_Tetris) GetPlayerEnterRoomS2CBroadcast() *S2C_PlayerEnterRoomBroadcast {
	if x != nil {
		return x.PlayerEnterRoomS2CBroadcast
	}
	return nil
}

func (x *S2C_Tetris) GetPlayerExitS2CBroadcast() *S2C_PlayerExitBroadcast {
	if x != nil {
		return x.PlayerExitS2CBroadcast
	}
	return nil
}

func (x *S2C_Tetris) GetGameStartS2CBroadcast() *S2C_GameStartBroadcast {
	if x != nil {
		return x.GameStartS2CBroadcast
	}
	return nil
}

func (x *S2C_Tetris) GetPlayerExpressionS2CBroadcast() *S2C_PlayerExpressionBroadcast {
	if x != nil {
		return x.PlayerExpressionS2CBroadcast
	}
	return nil
}

func (x *S2C_Tetris) GetGridS2CBroadcast() *S2C_GridBroadcast {
	if x != nil {
		return x.GridS2CBroadcast
	}
	return nil
}

func (x *S2C_Tetris) GetGameOverS2CBroadcast() *S2C_GameOverBroadcast {
	if x != nil {
		return x.GameOverS2CBroadcast
	}
	return nil
}

//---------------------------------------------------------------------------
// 玩家进入房间广播
type S2C_PlayerEnterRoomBroadcast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户id
}

func (x *S2C_PlayerEnterRoomBroadcast) Reset() {
	*x = S2C_PlayerEnterRoomBroadcast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tetris_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_PlayerEnterRoomBroadcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_PlayerEnterRoomBroadcast) ProtoMessage() {}

func (x *S2C_PlayerEnterRoomBroadcast) ProtoReflect() protoreflect.Message {
	mi := &file_message_tetris_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_PlayerEnterRoomBroadcast.ProtoReflect.Descriptor instead.
func (*S2C_PlayerEnterRoomBroadcast) Descriptor() ([]byte, []int) {
	return file_message_tetris_proto_rawDescGZIP(), []int{9}
}

func (x *S2C_PlayerEnterRoomBroadcast) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 玩家退出游戏广播
type S2C_PlayerExitBroadcast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerIndex uint32 `protobuf:"varint,1,opt,name=player_index,json=playerIndex,proto3" json:"player_index,omitempty"` //玩家序号
	UserId      int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                //玩家id
}

func (x *S2C_PlayerExitBroadcast) Reset() {
	*x = S2C_PlayerExitBroadcast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tetris_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_PlayerExitBroadcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_PlayerExitBroadcast) ProtoMessage() {}

func (x *S2C_PlayerExitBroadcast) ProtoReflect() protoreflect.Message {
	mi := &file_message_tetris_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_PlayerExitBroadcast.ProtoReflect.Descriptor instead.
func (*S2C_PlayerExitBroadcast) Descriptor() ([]byte, []int) {
	return file_message_tetris_proto_rawDescGZIP(), []int{10}
}

func (x *S2C_PlayerExitBroadcast) GetPlayerIndex() uint32 {
	if x != nil {
		return x.PlayerIndex
	}
	return 0
}

func (x *S2C_PlayerExitBroadcast) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 房间游戏开始广播
type S2C_GameStartBroadcast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfo []*TetrisPlayerInfo `protobuf:"bytes,1,rep,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty"` //用户公用信息
	RoomInfo   *TetrisRoomInfo     `protobuf:"bytes,3,opt,name=room_info,json=roomInfo,proto3" json:"room_info,omitempty"`       //房间信息
}

func (x *S2C_GameStartBroadcast) Reset() {
	*x = S2C_GameStartBroadcast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tetris_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_GameStartBroadcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_GameStartBroadcast) ProtoMessage() {}

func (x *S2C_GameStartBroadcast) ProtoReflect() protoreflect.Message {
	mi := &file_message_tetris_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_GameStartBroadcast.ProtoReflect.Descriptor instead.
func (*S2C_GameStartBroadcast) Descriptor() ([]byte, []int) {
	return file_message_tetris_proto_rawDescGZIP(), []int{11}
}

func (x *S2C_GameStartBroadcast) GetPlayerInfo() []*TetrisPlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *S2C_GameStartBroadcast) GetRoomInfo() *TetrisRoomInfo {
	if x != nil {
		return x.RoomInfo
	}
	return nil
}

// 玩家发送表情广播
type S2C_PlayerExpressionBroadcast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                           //玩家id
	ToUser          int64  `protobuf:"varint,2,opt,name=to_user,json=toUser,proto3" json:"to_user,omitempty"`                           //发送给玩家ID
	ExpressionIndex string `protobuf:"bytes,3,opt,name=expression_index,json=expressionIndex,proto3" json:"expression_index,omitempty"` //表情序号
}

func (x *S2C_PlayerExpressionBroadcast) Reset() {
	*x = S2C_PlayerExpressionBroadcast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tetris_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_PlayerExpressionBroadcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_PlayerExpressionBroadcast) ProtoMessage() {}

func (x *S2C_PlayerExpressionBroadcast) ProtoReflect() protoreflect.Message {
	mi := &file_message_tetris_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_PlayerExpressionBroadcast.ProtoReflect.Descriptor instead.
func (*S2C_PlayerExpressionBroadcast) Descriptor() ([]byte, []int) {
	return file_message_tetris_proto_rawDescGZIP(), []int{12}
}

func (x *S2C_PlayerExpressionBroadcast) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *S2C_PlayerExpressionBroadcast) GetToUser() int64 {
	if x != nil {
		return x.ToUser
	}
	return 0
}

func (x *S2C_PlayerExpressionBroadcast) GetExpressionIndex() string {
	if x != nil {
		return x.ExpressionIndex
	}
	return ""
}

// 游戏数据变更广播
type S2C_GridBroadcast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frame  int64    `protobuf:"varint,1,opt,name=frame,proto3" json:"frame,omitempty"` //同步数据当前帧数
	Map    []*Block `protobuf:"bytes,2,rep,name=map,proto3" json:"map,omitempty"`      // 定义Map对象
	Width  int64    `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height int64    `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *S2C_GridBroadcast) Reset() {
	*x = S2C_GridBroadcast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tetris_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_GridBroadcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_GridBroadcast) ProtoMessage() {}

func (x *S2C_GridBroadcast) ProtoReflect() protoreflect.Message {
	mi := &file_message_tetris_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_GridBroadcast.ProtoReflect.Descriptor instead.
func (*S2C_GridBroadcast) Descriptor() ([]byte, []int) {
	return file_message_tetris_proto_rawDescGZIP(), []int{13}
}

func (x *S2C_GridBroadcast) GetFrame() int64 {
	if x != nil {
		return x.Frame
	}
	return 0
}

func (x *S2C_GridBroadcast) GetMap() []*Block {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *S2C_GridBroadcast) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *S2C_GridBroadcast) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

// 游戏结束进入结算广播
type S2C_GameOverBroadcast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frame int64 `protobuf:"varint,1,opt,name=frame,proto3" json:"frame,omitempty"` //同步数据当前帧数
}

func (x *S2C_GameOverBroadcast) Reset() {
	*x = S2C_GameOverBroadcast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tetris_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_GameOverBroadcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_GameOverBroadcast) ProtoMessage() {}

func (x *S2C_GameOverBroadcast) ProtoReflect() protoreflect.Message {
	mi := &file_message_tetris_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_GameOverBroadcast.ProtoReflect.Descriptor instead.
func (*S2C_GameOverBroadcast) Descriptor() ([]byte, []int) {
	return file_message_tetris_proto_rawDescGZIP(), []int{14}
}

func (x *S2C_GameOverBroadcast) GetFrame() int64 {
	if x != nil {
		return x.Frame
	}
	return 0
}

//---------------------------------------------------------------------------
type TetrisPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //玩家id
	IconUrl   string `protobuf:"bytes,2,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`        //头像链接
	IconFrame string `protobuf:"bytes,3,opt,name=icon_frame,json=iconFrame,proto3" json:"icon_frame,omitempty"`  //头像框序号
	SeatIndex uint32 `protobuf:"varint,4,opt,name=seat_index,json=seatIndex,proto3" json:"seat_index,omitempty"` //游戏中的玩家座位序号
	NickName  string `protobuf:"bytes,5,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`     //玩家昵称
	InGame    bool   `protobuf:"varint,6,opt,name=in_game,json=inGame,proto3" json:"in_game,omitempty"`          //是否在游戏中尚未退出
	Online    bool   `protobuf:"varint,7,opt,name=online,proto3" json:"online,omitempty"`                        //是否在线
	Auto      bool   `protobuf:"varint,8,opt,name=auto,proto3" json:"auto,omitempty"`                            //是否托管
}

func (x *TetrisPlayerInfo) Reset() {
	*x = TetrisPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tetris_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TetrisPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TetrisPlayerInfo) ProtoMessage() {}

func (x *TetrisPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_tetris_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TetrisPlayerInfo.ProtoReflect.Descriptor instead.
func (*TetrisPlayerInfo) Descriptor() ([]byte, []int) {
	return file_message_tetris_proto_rawDescGZIP(), []int{15}
}

func (x *TetrisPlayerInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TetrisPlayerInfo) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *TetrisPlayerInfo) GetIconFrame() string {
	if x != nil {
		return x.IconFrame
	}
	return ""
}

func (x *TetrisPlayerInfo) GetSeatIndex() uint32 {
	if x != nil {
		return x.SeatIndex
	}
	return 0
}

func (x *TetrisPlayerInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *TetrisPlayerInfo) GetInGame() bool {
	if x != nil {
		return x.InGame
	}
	return false
}

func (x *TetrisPlayerInfo) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *TetrisPlayerInfo) GetAuto() bool {
	if x != nil {
		return x.Auto
	}
	return false
}

type TetrisRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomType  TetrisGameType `protobuf:"varint,1,opt,name=room_type,json=roomType,proto3,enum=tetris.TetrisGameType" json:"room_type,omitempty"` //房间类型
	PlayerNum int64          `protobuf:"varint,2,opt,name=player_num,json=playerNum,proto3" json:"player_num,omitempty"`                         //对战人数 1/2
	Gear      int64          `protobuf:"varint,3,opt,name=gear,proto3" json:"gear,omitempty"`                                                    //档位（投入金币数）
	UseProps  bool           `protobuf:"varint,4,opt,name=use_props,json=useProps,proto3" json:"use_props,omitempty"`                            //是否使用道具
	Private   bool           `protobuf:"varint,5,opt,name=private,proto3" json:"private,omitempty"`                                              //是否私有房
	Version   string         `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`                                               //协议版本号
	Owner     int64          `protobuf:"varint,7,opt,name=owner,proto3" json:"owner,omitempty"`                                                  //房间拥有者
}

func (x *TetrisRoomInfo) Reset() {
	*x = TetrisRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tetris_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TetrisRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TetrisRoomInfo) ProtoMessage() {}

func (x *TetrisRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_tetris_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TetrisRoomInfo.ProtoReflect.Descriptor instead.
func (*TetrisRoomInfo) Descriptor() ([]byte, []int) {
	return file_message_tetris_proto_rawDescGZIP(), []int{16}
}

func (x *TetrisRoomInfo) GetRoomType() TetrisGameType {
	if x != nil {
		return x.RoomType
	}
	return TetrisGameType_CLASSIC
}

func (x *TetrisRoomInfo) GetPlayerNum() int64 {
	if x != nil {
		return x.PlayerNum
	}
	return 0
}

func (x *TetrisRoomInfo) GetGear() int64 {
	if x != nil {
		return x.Gear
	}
	return 0
}

func (x *TetrisRoomInfo) GetUseProps() bool {
	if x != nil {
		return x.UseProps
	}
	return false
}

func (x *TetrisRoomInfo) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *TetrisRoomInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TetrisRoomInfo) GetOwner() int64 {
	if x != nil {
		return x.Owner
	}
	return 0
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Opacity   uint32 `protobuf:"varint,2,opt,name=opacity,proto3" json:"opacity,omitempty"`
	Operating uint32 `protobuf:"varint,3,opt,name=operating,proto3" json:"operating,omitempty"`
	Index     uint32 `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tetris_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_message_tetris_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_message_tetris_proto_rawDescGZIP(), []int{17}
}

func (x *Block) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Block) GetOpacity() uint32 {
	if x != nil {
		return x.Opacity
	}
	return 0
}

func (x *Block) GetOperating() uint32 {
	if x != nil {
		return x.Operating
	}
	return 0
}

func (x *Block) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

var File_message_tetris_proto protoreflect.FileDescriptor

var file_message_tetris_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x74, 0x65, 0x74, 0x72, 0x69, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x74, 0x65, 0x74, 0x72, 0x69, 0x73, 0x1a, 0x13,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x02, 0x0a, 0x11, 0x53, 0x32, 0x53, 0x5f,
	0x54, 0x65, 0x74, 0x72, 0x69, 0x73, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x69, 0x73, 0x2e, 0x54, 0x65, 0x74, 0x72, 0x69, 0x73,
	0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x67, 0x65, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x22, 0x9e, 0x02, 0x0a, 0x17, 0x53, 0x32, 0x53, 0x5f, 0x54, 0x65, 0x74, 0x72, 0x69,
	0x73, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x33,
	0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x69, 0x73, 0x2e, 0x54, 0x65, 0x74, 0x72, 0x69,
	0x73, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x67, 0x65, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x22, 0xb3, 0x02, 0x0a, 0x11, 0x53, 0x32, 0x52, 0x5f, 0x54, 0x65, 0x74, 0x72,
	0x69, 0x73, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74,
	0x65, 0x74, 0x72, 0x69, 0x73, 0x2e, 0x54, 0x65, 0x74, 0x72, 0x69, 0x73, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x65, 0x61,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0xb4, 0x04, 0x0a, 0x0a, 0x43, 0x32,
	0x53, 0x5f, 0x54, 0x65, 0x74, 0x72, 0x69, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0e,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x63, 0x32, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x32, 0x53, 0x5f,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x32, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x65, 0x78, 0x69, 0x74, 0x5f,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x63, 0x32, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x45, 0x78, 0x69, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x52, 0x0b, 0x65, 0x78, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x32, 0x73, 0x12,
	0x36, 0x0a, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x32, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x32,
	0x53, 0x5f, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x43, 0x32, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x32, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x74, 0x65, 0x74, 0x72, 0x69, 0x73, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x43, 0x32, 0x73, 0x12, 0x50, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x32, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x69, 0x73, 0x2e, 0x43, 0x32, 0x53, 0x5f,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x32, 0x73, 0x12, 0x60, 0x0a, 0x1d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6b, 0x65, 0x6c, 0x65, 0x74,
	0x6f, 0x6e, 0x5f, 0x63, 0x32, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74,
	0x65, 0x74, 0x72, 0x69, 0x73, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x52, 0x1a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x65, 0x6c,
	0x65, 0x74, 0x6f, 0x6e, 0x43, 0x32, 0x73, 0x12, 0x57, 0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f,
	0x6e, 0x5f, 0x63, 0x32, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65,
	0x74, 0x72, 0x69, 0x73, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53,
	0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x52, 0x17, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x43, 0x32, 0x73,
	0x22, 0x54, 0x0a, 0x14, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x22, 0x23, 0x0a, 0x0d, 0x43, 0x32, 0x53, 0x5f, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x45, 0x0a, 0x15, 0x43,
	0x32, 0x53, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x65, 0x6c,
	0x65, 0x74, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x12, 0x43, 0x32, 0x53, 0x5f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x53, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x85, 0x05, 0x0a, 0x0a, 0x53, 0x32, 0x43, 0x5f, 0x54, 0x65, 0x74, 0x72,
	0x69, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x6a, 0x0a,
	0x1f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x73, 0x32, 0x63, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x69, 0x73, 0x2e,
	0x53, 0x32, 0x43, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52,
	0x6f, 0x6f, 0x6d, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x1b, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x32, 0x63,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x19, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x73, 0x32, 0x63, 0x5f, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74,
	0x65, 0x74, 0x72, 0x69, 0x73, 0x2e, 0x53, 0x32, 0x43, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x45, 0x78, 0x69, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x16, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x69, 0x74, 0x53, 0x32, 0x63, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x18, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x73, 0x32, 0x63, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x69, 0x73,
	0x2e, 0x53, 0x32, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x15, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x53, 0x32, 0x63, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x6c,
	0x0a, 0x1f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x32, 0x63, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x69, 0x73,
	0x2e, 0x53, 0x32, 0x43, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x1c,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x32, 0x63, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x12,
	0x67, 0x72, 0x69, 0x64, 0x5f, 0x73, 0x32, 0x63, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x69,
	0x73, 0x2e, 0x53, 0x32, 0x43, 0x5f, 0x47, 0x72, 0x69, 0x64, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x52, 0x10, 0x67, 0x72, 0x69, 0x64, 0x53, 0x32, 0x63, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x17, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x73, 0x32, 0x63, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x69, 0x73, 0x2e,
	0x53, 0x32, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x14, 0x67, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x53,
	0x32, 0x63, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x22, 0x37, 0x0a, 0x1c, 0x53,
	0x32, 0x43, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f,
	0x6f, 0x6d, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x17, 0x53, 0x32, 0x43, 0x5f, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x45, 0x78, 0x69, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x16,
	0x53, 0x32, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65,
	0x74, 0x72, 0x69, 0x73, 0x2e, 0x54, 0x65, 0x74, 0x72, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x33, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x69, 0x73, 0x2e, 0x54, 0x65,
	0x74, 0x72, 0x69, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7c, 0x0a, 0x1d, 0x53, 0x32, 0x43, 0x5f, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x78, 0x0a, 0x11, 0x53, 0x32, 0x43, 0x5f, 0x47, 0x72, 0x69, 0x64,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74,
	0x65, 0x74, 0x72, 0x69, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x03, 0x6d, 0x61, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x2d,
	0x0a, 0x15, 0x53, 0x32, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x22, 0xe6, 0x01,
	0x0a, 0x10, 0x54, 0x65, 0x74, 0x72, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x22, 0xdf, 0x01, 0x0a, 0x0e, 0x54, 0x65, 0x74, 0x72, 0x69,
	0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x09, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74,
	0x65, 0x74, 0x72, 0x69, 0x73, 0x2e, 0x54, 0x65, 0x74, 0x72, 0x69, 0x73, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x65, 0x61,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x6b, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x2a, 0x28, 0x0a, 0x0e, 0x54, 0x65, 0x74, 0x72, 0x69, 0x73, 0x47,
	0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x49, 0x43, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x10, 0x01, 0x42,
	0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69,
	0x61, 0x6e, 0x67, 0x64, 0x61, 0x73, 0x2f, 0x6a, 0x6f, 0x79, 0x2d, 0x74, 0x65, 0x74, 0x72, 0x69,
	0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e,
	0x67, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_message_tetris_proto_rawDescOnce sync.Once
	file_message_tetris_proto_rawDescData = file_message_tetris_proto_rawDesc
)

func file_message_tetris_proto_rawDescGZIP() []byte {
	file_message_tetris_proto_rawDescOnce.Do(func() {
		file_message_tetris_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_tetris_proto_rawDescData)
	})
	return file_message_tetris_proto_rawDescData
}

var file_message_tetris_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_message_tetris_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_message_tetris_proto_goTypes = []interface{}{
	(TetrisGameType)(0),                   // 0: tetris.TetrisGameType
	(*S2S_Tetris_Create)(nil),             // 1: tetris.S2S_Tetris_Create
	(*S2S_Tetris_Create_Debug)(nil),       // 2: tetris.S2S_Tetris_Create_Debug
	(*S2R_Tetris_Create)(nil),             // 3: tetris.S2R_Tetris_Create
	(*C2S_Tetris)(nil),                    // 4: tetris.C2S_Tetris
	(*C2S_PlayerExpression)(nil),          // 5: tetris.C2S_PlayerExpression
	(*C2S_Heartbeat)(nil),                 // 6: tetris.C2S_Heartbeat
	(*C2S_OperationSkeleton)(nil),         // 7: tetris.C2S_OperationSkeleton
	(*C2S_SelectSkeleton)(nil),            // 8: tetris.C2S_SelectSkeleton
	(*S2C_Tetris)(nil),                    // 9: tetris.S2C_Tetris
	(*S2C_PlayerEnterRoomBroadcast)(nil),  // 10: tetris.S2C_PlayerEnterRoomBroadcast
	(*S2C_PlayerExitBroadcast)(nil),       // 11: tetris.S2C_PlayerExitBroadcast
	(*S2C_GameStartBroadcast)(nil),        // 12: tetris.S2C_GameStartBroadcast
	(*S2C_PlayerExpressionBroadcast)(nil), // 13: tetris.S2C_PlayerExpressionBroadcast
	(*S2C_GridBroadcast)(nil),             // 14: tetris.S2C_GridBroadcast
	(*S2C_GameOverBroadcast)(nil),         // 15: tetris.S2C_GameOverBroadcast
	(*TetrisPlayerInfo)(nil),              // 16: tetris.TetrisPlayerInfo
	(*TetrisRoomInfo)(nil),                // 17: tetris.TetrisRoomInfo
	(*Block)(nil),                         // 18: tetris.Block
	(*C2S_EnterRoom)(nil),                 // 19: game.C2S_EnterRoom
	(*C2S_ExitRoom)(nil),                  // 20: game.C2S_ExitRoom
	(*C2S_SyncInfo)(nil),                  // 21: game.C2S_SyncInfo
}
var file_message_tetris_proto_depIdxs = []int32{
	0,  // 0: tetris.S2S_Tetris_Create.game_type:type_name -> tetris.TetrisGameType
	0,  // 1: tetris.S2S_Tetris_Create_Debug.game_type:type_name -> tetris.TetrisGameType
	0,  // 2: tetris.S2R_Tetris_Create.game_type:type_name -> tetris.TetrisGameType
	19, // 3: tetris.C2S_Tetris.enter_room_c2s:type_name -> game.C2S_EnterRoom
	20, // 4: tetris.C2S_Tetris.exit_room_c2s:type_name -> game.C2S_ExitRoom
	21, // 5: tetris.C2S_Tetris.sync_info_c2s:type_name -> game.C2S_SyncInfo
	6,  // 6: tetris.C2S_Tetris.heartbeat_c2s:type_name -> tetris.C2S_Heartbeat
	5,  // 7: tetris.C2S_Tetris.player_expression_c2s:type_name -> tetris.C2S_PlayerExpression
	7,  // 8: tetris.C2S_Tetris.player_operation_skeleton_c2s:type_name -> tetris.C2S_OperationSkeleton
	8,  // 9: tetris.C2S_Tetris.player_select_skeleton_c2s:type_name -> tetris.C2S_SelectSkeleton
	10, // 10: tetris.S2C_Tetris.player_enter_room_s2c_broadcast:type_name -> tetris.S2C_PlayerEnterRoomBroadcast
	11, // 11: tetris.S2C_Tetris.player_exit_s2c_broadcast:type_name -> tetris.S2C_PlayerExitBroadcast
	12, // 12: tetris.S2C_Tetris.game_start_s2c_broadcast:type_name -> tetris.S2C_GameStartBroadcast
	13, // 13: tetris.S2C_Tetris.player_expression_s2c_broadcast:type_name -> tetris.S2C_PlayerExpressionBroadcast
	14, // 14: tetris.S2C_Tetris.grid_s2c_broadcast:type_name -> tetris.S2C_GridBroadcast
	15, // 15: tetris.S2C_Tetris.game_over_s2c_broadcast:type_name -> tetris.S2C_GameOverBroadcast
	16, // 16: tetris.S2C_GameStartBroadcast.player_info:type_name -> tetris.TetrisPlayerInfo
	17, // 17: tetris.S2C_GameStartBroadcast.room_info:type_name -> tetris.TetrisRoomInfo
	18, // 18: tetris.S2C_GridBroadcast.map:type_name -> tetris.Block
	0,  // 19: tetris.TetrisRoomInfo.room_type:type_name -> tetris.TetrisGameType
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_message_tetris_proto_init() }
func file_message_tetris_proto_init() {
	if File_message_tetris_proto != nil {
		return
	}
	file_message_error_proto_init()
	file_message_game_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_message_tetris_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2S_Tetris_Create); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tetris_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2S_Tetris_Create_Debug); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tetris_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2R_Tetris_Create); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tetris_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_Tetris); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tetris_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_PlayerExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tetris_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_Heartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tetris_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_OperationSkeleton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tetris_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_SelectSkeleton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tetris_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_Tetris); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tetris_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_PlayerEnterRoomBroadcast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tetris_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_PlayerExitBroadcast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tetris_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_GameStartBroadcast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tetris_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_PlayerExpressionBroadcast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tetris_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_GridBroadcast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tetris_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_GameOverBroadcast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tetris_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TetrisPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tetris_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TetrisRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tetris_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_tetris_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_tetris_proto_goTypes,
		DependencyIndexes: file_message_tetris_proto_depIdxs,
		EnumInfos:         file_message_tetris_proto_enumTypes,
		MessageInfos:      file_message_tetris_proto_msgTypes,
	}.Build()
	File_message_tetris_proto = out.File
	file_message_tetris_proto_rawDesc = nil
	file_message_tetris_proto_goTypes = nil
	file_message_tetris_proto_depIdxs = nil
}
